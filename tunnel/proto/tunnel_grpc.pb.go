// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: tunnel.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TunnelClient is the client API for Tunnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelClient interface {
	ReverseServe(ctx context.Context, opts ...grpc.CallOption) (Tunnel_ReverseServeClient, error)
	Heartbeat(ctx context.Context, opts ...grpc.CallOption) (Tunnel_HeartbeatClient, error)
}

type tunnelClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelClient(cc grpc.ClientConnInterface) TunnelClient {
	return &tunnelClient{cc}
}

func (c *tunnelClient) ReverseServe(ctx context.Context, opts ...grpc.CallOption) (Tunnel_ReverseServeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tunnel_ServiceDesc.Streams[0], "/proto.Tunnel/ReverseServe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tunnelReverseServeClient{stream}
	return x, nil
}

type Tunnel_ReverseServeClient interface {
	Send(*APIResponse) error
	Recv() (*APIRequest, error)
	grpc.ClientStream
}

type tunnelReverseServeClient struct {
	grpc.ClientStream
}

func (x *tunnelReverseServeClient) Send(m *APIResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tunnelReverseServeClient) Recv() (*APIRequest, error) {
	m := new(APIRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tunnelClient) Heartbeat(ctx context.Context, opts ...grpc.CallOption) (Tunnel_HeartbeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tunnel_ServiceDesc.Streams[1], "/proto.Tunnel/Heartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &tunnelHeartbeatClient{stream}
	return x, nil
}

type Tunnel_HeartbeatClient interface {
	Send(*Empty) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type tunnelHeartbeatClient struct {
	grpc.ClientStream
}

func (x *tunnelHeartbeatClient) Send(m *Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tunnelHeartbeatClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TunnelServer is the server API for Tunnel service.
// All implementations should embed UnimplementedTunnelServer
// for forward compatibility
type TunnelServer interface {
	ReverseServe(Tunnel_ReverseServeServer) error
	Heartbeat(Tunnel_HeartbeatServer) error
}

// UnimplementedTunnelServer should be embedded to have forward compatible implementations.
type UnimplementedTunnelServer struct {
}

func (UnimplementedTunnelServer) ReverseServe(Tunnel_ReverseServeServer) error {
	return status.Errorf(codes.Unimplemented, "method ReverseServe not implemented")
}
func (UnimplementedTunnelServer) Heartbeat(Tunnel_HeartbeatServer) error {
	return status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}

// UnsafeTunnelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelServer will
// result in compilation errors.
type UnsafeTunnelServer interface {
	mustEmbedUnimplementedTunnelServer()
}

func RegisterTunnelServer(s grpc.ServiceRegistrar, srv TunnelServer) {
	s.RegisterService(&Tunnel_ServiceDesc, srv)
}

func _Tunnel_ReverseServe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelServer).ReverseServe(&tunnelReverseServeServer{stream})
}

type Tunnel_ReverseServeServer interface {
	Send(*APIRequest) error
	Recv() (*APIResponse, error)
	grpc.ServerStream
}

type tunnelReverseServeServer struct {
	grpc.ServerStream
}

func (x *tunnelReverseServeServer) Send(m *APIRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tunnelReverseServeServer) Recv() (*APIResponse, error) {
	m := new(APIResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Tunnel_Heartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelServer).Heartbeat(&tunnelHeartbeatServer{stream})
}

type Tunnel_HeartbeatServer interface {
	SendAndClose(*Empty) error
	Recv() (*Empty, error)
	grpc.ServerStream
}

type tunnelHeartbeatServer struct {
	grpc.ServerStream
}

func (x *tunnelHeartbeatServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tunnelHeartbeatServer) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Tunnel_ServiceDesc is the grpc.ServiceDesc for Tunnel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tunnel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Tunnel",
	HandlerType: (*TunnelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReverseServe",
			Handler:       _Tunnel_ReverseServe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Heartbeat",
			Handler:       _Tunnel_Heartbeat_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "tunnel.proto",
}
